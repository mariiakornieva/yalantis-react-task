{"version":3,"sources":["context/StateContext.jsx","constants.js","components/Employee.jsx","components/EmployeesList.jsx","helpers.js","App.js","api/api.js","reportWebVitals.js","index.js"],"names":["LOCAL_STORAGE_KEY","employeesReducer","state","type","payload","employees","activeIds","filter","id","initialState","DispatchContext","React","createContext","StateContext","StateProvider","children","useReducer","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","Provider","value","ALPHABET","MONTHS","FIRST_MONTH_IDX","indexOf","ORDERED_MONTHS","slice","concat","Employee","firstName","lastName","dob","withDob","isActive","getDateStr","useCallback","date","Date","day","getDate","month","getMonth","year","getFullYear","className","cn","defaultProps","EmployeesList","listName","groupedBy","useContext","length","map","employee","includes","name","checked","onChange","htmlFor","filterEmployees","filterBy","toUpperCase","App","fetch","process","then","response","json","catch","reason","console","warn","sortedEmployees","useMemo","sortBy","sorted","sort","first","second","localeCompare","sortEmployees","groupedByLastname","split","letter","activeEmployees","groupedByMonth","grouped","idx","some","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cdfc220.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\n\nconst LOCAL_STORAGE_KEY = \"activeIds\";\n\nconst employeesReducer = (state, [type, payload]) => {\n  switch (type) {\n    case \"setEmployees\":\n      return {\n        ...state,\n        employees: payload,\n      };\n    case \"setActiveIds\":\n      return {\n        ...state,\n        activeIds: payload,\n      };\n    case \"addActiveId\":\n      return {\n        ...state,\n        activeIds: [...state.activeIds, payload],\n      };\n    case \"removeActiveId\":\n      return {\n        ...state,\n        activeIds: state.activeIds.filter((id) => id !== payload),\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  employees: [],\n  activeIds: [],\n};\n\nexport const DispatchContext = React.createContext(() => {});\nexport const StateContext = React.createContext(null);\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(employeesReducer, initialState, () => {\n    try {\n      return {\n        ...initialState,\n        activeIds: JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [],\n      };\n    } catch {\n      return initialState;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state.activeIds));\n  }, [state.activeIds]);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>{children}</StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n};\n","export const ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nexport const MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst FIRST_MONTH = \"May\";\nexport const FIRST_MONTH_IDX = MONTHS.indexOf(FIRST_MONTH);\n\nexport const ORDERED_MONTHS = MONTHS.slice(FIRST_MONTH_IDX).concat(\n  MONTHS.slice(0, FIRST_MONTH_IDX)\n);\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cn from \"classnames\";\n\nimport { MONTHS } from \"../constants\";\n\nexport const Employee = ({\n  firstName,\n  lastName,\n  dob,\n  withDob,\n  isActive,\n  children,\n}) => {\n  const getDateStr = useCallback(() => {\n    const date = new Date(dob);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    return `${day} ${MONTHS[month]}, ${year} year`;\n  }, [dob]);\n\n  return (\n    <>\n      <p\n        className={cn(\"Employee\", {\n          \"Employee--active\": isActive,\n        })}\n      >\n        {`${lastName} ${firstName}`}\n        {withDob && ` - ${getDateStr()}`}\n      </p>\n      {children}\n    </>\n  );\n};\n\nEmployee.propTypes = {\n  firstName: PropTypes.string,\n  lastName: PropTypes.string,\n  dob: function (props, propName, componentName) {\n    if (isNaN(Date.parse(props[propName]))) {\n      return new Error(`Invalid prop ${propName} passed to ${componentName}`);\n    }\n  },\n  withDob: PropTypes.bool,\n  isActive: PropTypes.bool,\n  children: PropTypes.any,\n};\n\nEmployee.defaultProps = {\n  firstName: \"\",\n  lastName: \"\",\n  dob: \"\",\n  withDob: false,\n  isActive: false,\n  children: null,\n};\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cn from \"classnames\";\n\nimport { Employee } from \"./Employee\";\nimport { DispatchContext, StateContext } from \"../context/StateContext\";\n\nexport const EmployeesList = ({ listName, employees, groupedBy }) => {\n  const { activeIds } = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  return (\n    <>\n      <h3>{listName}</h3>\n      <ul\n        className={cn(\"EmployeesList\", {\n          \"EmployeesList--by-lastname\": groupedBy === \"lastName\",\n          \"EmployeesList--by-month\": groupedBy === \"month\",\n        })}\n      >\n        {employees.length ? (\n          employees.map(({ id, ...employee }) => (\n            <li key={id}>\n              <Employee\n                withDob={groupedBy === \"month\"}\n                isActive={activeIds.includes(id)}\n                {...employee}\n              >\n                {groupedBy === \"lastName\" && (\n                  <>\n                    <div>\n                      <input\n                        type=\"radio\"\n                        id={`${id}-inactive`}\n                        value=\"false\"\n                        name={`employee-${id}-activity`}\n                        checked={!activeIds.includes(id)}\n                        onChange={() => dispatch([\"removeActiveId\", id])}\n                      />\n                      <label htmlFor={`${id}-inactive`}>inactive</label>\n                    </div>\n\n                    <div>\n                      <input\n                        type=\"radio\"\n                        id={`${id}-active`}\n                        value=\"true\"\n                        name={`employee-${id}-activity`}\n                        checked={activeIds.includes(id)}\n                        onChange={() => dispatch([\"addActiveId\", id])}\n                      />\n                      <label htmlFor={`${id}-active`}>active</label>\n                    </div>\n                  </>\n                )}\n              </Employee>\n            </li>\n          ))\n        ) : (\n          <li>\n            <p>-----</p>\n          </li>\n        )}\n      </ul>\n    </>\n  );\n};\n\nEmployeesList.propTypes = {\n  listName: PropTypes.string,\n  employees: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  groupedBy: PropTypes.string,\n};\n\nEmployeesList.defaultProps = {\n  listName: \"\",\n  employees: [],\n  groupedBy: \"\",\n};\n","export const sortEmployees = (employees, sortBy) => {\n  const sorted = [...employees];\n\n  switch (sortBy) {\n    case \"lastName\":\n      return sorted.sort((first, second) =>\n        first.lastName.localeCompare(second.lastName)\n      );\n    default:\n      return sorted;\n  }\n};\n\nexport const filterEmployees = (employees, filterBy, value) => {\n  switch (filterBy) {\n    case \"lastName\":\n      return employees.filter(\n        ({ lastName }) => lastName[0].toUpperCase() === value\n      );\n    case \"month\":\n      return employees.filter(({ dob }) => new Date(dob).getMonth() === value);\n    case \"active\":\n      return employees.filter(({ id }) => value.includes(id));\n    default:\n      return [...employees];\n  }\n};\n","import React, { useEffect, useMemo, useContext } from \"react\";\nimport \"./App.css\";\n\nimport { DispatchContext, StateContext } from \"./context/StateContext\";\nimport { EmployeesList } from \"./components/EmployeesList\";\nimport { sortEmployees, filterEmployees } from \"./helpers\";\nimport { ALPHABET, MONTHS, FIRST_MONTH_IDX, ORDERED_MONTHS } from \"./constants\";\nimport { fetchEmployees } from \"./api/api\";\n\nfunction App() {\n  const dispatch = useContext(DispatchContext);\n  const { employees, activeIds } = useContext(StateContext);\n\n  useEffect(() => {\n    fetchEmployees()\n      .then((employees) => dispatch([\"setEmployees\", employees]))\n      .catch((reason) =>\n        console.warn(`Failed to load employees; Reason = ${reason}`)\n      );\n  }, []);\n\n  const sortedEmployees = useMemo(\n    () => sortEmployees(employees, \"lastName\"),\n    [employees]\n  );\n\n  const groupedByLastname = useMemo(\n    () =>\n      ALPHABET.split(\"\").map((letter) =>\n        filterEmployees(sortedEmployees, \"lastName\", letter)\n      ),\n    [sortedEmployees]\n  );\n\n  const activeEmployees = useMemo(\n    () => filterEmployees(sortedEmployees, \"active\", activeIds),\n    [sortedEmployees, activeIds]\n  );\n\n  const groupedByMonth = useMemo(() => {\n    const grouped = MONTHS.map((month, idx) =>\n      filterEmployees(activeEmployees, \"month\", idx)\n    );\n\n    return grouped\n      .slice(FIRST_MONTH_IDX)\n      .concat(grouped.slice(0, FIRST_MONTH_IDX));\n  }, [activeEmployees]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Employees\">\n        <h2 className=\"Title\">Employees</h2>\n\n        <ul className=\"Alphabet\">\n          {ALPHABET.split(\"\").map((letter, idx) => (\n            <li key={letter} className=\"Alphabet__item\">\n              <EmployeesList\n                groupedBy=\"lastName\"\n                listName={letter}\n                employees={groupedByLastname[idx]}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"EmployeesBDays\">\n        <h2 className=\"Title EmployeesBDays__title\">Employees Birthday</h2>\n\n        {groupedByMonth.some((month) => month.length > 0) ? (\n          <ul className=\"MonthsList\">\n            {ORDERED_MONTHS.map(\n              (month, idx) =>\n                groupedByMonth[idx]?.length > 0 && (\n                  <li key={month}>\n                    <EmployeesList\n                      groupedBy=\"month\"\n                      listName={month}\n                      employees={groupedByMonth[idx]}\n                    />\n                  </li>\n                )\n            )}\n          </ul>\n        ) : (\n          <p className=\"MonthsList\">Employees List is empty</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const fetchEmployees = () => {\n  return fetch(process.env.REACT_APP_API_URL)\n    .then((response) => response.json());\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StateProvider } from \"./context/StateContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}